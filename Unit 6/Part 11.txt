Exercise 1

Here is some code from lecture:

def linearSearch(L, x):
    for e in L:
        if e == x:
            return True
    return False

Choose which of the following inputs to linearSearch would give the best case, average case,
or worst case run time.

1: Best Case Run Time
    
Correct: linearSearch([20, 10, 1, 7, 4, 22, 25, 12, 31], 20)


2: Worst Case Run Time

Correct: linearSearch([13, 9, 22, 3, 10, 17, 11, 2, 12], 26)


3: Average Case Run Time

Correct: linearSearch([9, 3, 12, 24, 7, 8, 23, 11, 19], 8)


4: What is the number of steps it will take to run linearSearch in the best case? Express 
   your answer in terms of n, the number of elements in the list L.

Indicate addition and multiplication explicitly, with + and * symbols. Indicate exponentiation 
with the caret (^) symbol.

Correct:  1    1


5: What is the number of steps it will take to run linearSearch in the worst case? Express 
   your answer in terms of n, the number of elements in the list L.

Indicate addition and multiplication explicitly, with + and * symbols. Indicate exponentiation 
with the caret (^) symbol.

Correct:  2*n + 1       2⋅𝑛+1


-----------
Exercise 2

For the following programs, fill in the best-case and the worst-case number of steps it will 
take to run each program.

For these questions, you'll be asked to write a mathematical expression. Use +, -, / signs to 
indicate addition, subtraction, and division. Explicitly indicate multiplication with a * 
(ie say "6*n" rather than "6n"). Indicate exponentiation with a caret (^) (ie "n^4" for 𝑛4). 
Indicate base-2 logarithms with the word log2 followed by parenthesis (ie "log2(n)").

1: Program 1:

    def program1(x):
        total = 0
        for i in range(1000):
            total += i

        while x > 0:
            x -= 1
            total += x

        return total

What is the number of steps it will take to run Program 1 in the best case? Express your 
answer in terms of n, the size of the input x.
    
Correct: 3003

What is the number of steps it will take to run Program 1 in the worst case? Express your 
answer in terms of n, the size of the input x. 

Correct: 5*n + 3003


2: Program 2:

def program2(x):
    total = 0
    for i in range(1000):
        total = i

    while x > 0:
        x = x//2
        total += x

    return total

What is the number of steps it will take to run Program 2 in the best case? Express your 
answer in terms of n, the size of the input x.

Correct: 2003 

What is the number of steps it will take to run Program 2 in the worst case? Express your 
answer in terms of n, the size of the input x.

Correct : 5*log2(n) + 2008 


3: Program 3:

def program3(L):
    totalSum = 0
    highestFound = None
    for x in L:
        totalSum += x

    for x in L:
        if highestFound == None:
            highestFound = x
        elif x > highestFound:
            highestFound = x

    return (totalSum, highestFound)

What is the number of steps it will take to run Program 3 in the best case? Express your 
answer in terms of n, the number of elements in the list L.

Correct: 3 

What is the number of steps it will take to run Program 3 in the worst case? Express your 
answer in terms of n, the number of elements in the list L.

Correct: 7*n + 2


-----------
Exercise 3

For the following programs, fill in the best-case and the worst-case number of steps it will 
take to run each program.

For these questions, you'll be asked to write a mathematical expression. Use +, -, / signs 
to indicate addition, subtraction, and division. Explicitly indicate multiplication with a 
* (ie say "6*n" rather than "6n"). Indicate exponentiation with a caret (^) (ie "n^4" for 𝑛4). 
Indicate base-2 logarithms with the word log2 followed by parenthesis (ie "log2(n)").


1: Program 1:

    def program1(L):
        multiples = []
        for x in L:
            for y in L:
                multiples.append(x*y)
        return multiples

    What is the number of steps it will take to run Program 1 in the best case? Express your 
    answer in terms of n, the number of elements in the list L. You can assume list appending 
    takes 1 step.

Correct: 2


    What is the number of steps it will take to run Program 1 in the worst case? Express your 
    answer in terms of n, the number of elements in the list L. You can assume list appending 
    takes 1 step.

Correct: 3*n^2 + n + 2


2: Program 2:

    def program2(L):
        squares = []
        for x in L:
            for y in L:
                if x == y:
                    squares.append(x*y)
        return squares

    What is the number of steps it will take to run Program 2 in the best case? Express your 
    answer in terms of n, the number of elements in the list L.

Correct: 2 


    What is the number of steps it will take to run Program 2 in the worst case? Express your 
    answer in terms of n, the number of elements in the list L.

Correct: 4*n^2 + n + 2


3: Program 3:

    def program3(L1, L2):
        intersection = []
        for elt in L1:
            if elt in L2:
                intersection.append(elt)
        return intersection

    What is the number of steps it will take to run Program 3 in the best case? Express your 
    answer in terms of n, the number of elements in the list L1 (assume len(L1) == len(L2)).

Correct:  2 


    What is the number of steps it will take to run Program 3 in the worst case? Express your 
    answer in terms of n, the number of elements in the list L1 (assume len(L1) == len(L2)).

Correct: n^2 + 2*n + 2


4:In the last video, Professor Grimson introduced the idea of "asymptotic complexity", which 
  means we describe running time in terms of number of basic steps. We've described the best- 
  and worst-case running times in terms number of basic steps for the three programs above. 
  Now, we'd like you to give the complexity order (ie, "Big O" running time) of each of the 
  above programs.

 Recall that "Big O" notation gives an upper bound on asymptotic growth of a function. So, 
 should you use the best-case or the worst-case running times for each program? Review the 
 video again if you're unsure of what to put for the following boxes.

 
What is the complexity order of Program 1?

Correct: O(n^2)


What is the complexity order of Program 2?

Correct: O(n^2)


What is the complexity order of Program 3?

Correct: O(n^2)


-----------
Exercise 4

1: 6.00.1x staff decide to hold an online chess tournament, and n 6.00.1x students respond 
to participate in it. If the tournament is a single-elimination tournament (this means you 
are eliminated when you lose once), how many games do we need to decide the winner, in terms 
of n? Assume there will be no draws or byes.

Correct: O(n)
   

2: You are asked to write an n page research paper. You've written plenty of research papers 
in your time, and you know it always takes you 30 minutes to write one page of a research paper.
In terms of n, what is the complexity order that describes the amount of time this research 
paper will take to write?

Correct: O(n)
   

3: You are asked to write an n page personal essay. You've written plenty of personal essays 
in your time, and you know it always takes you two hours to write a personal essay, no matter 
the length. In terms of n, what is the complexity order that describes the amount of time 
this personal essay will take to write?

Correct: O(1)


4: You just dropped a box of glass toys and n toys in the box broke in half. You'd like to 
match the halves of the toys so that you could glue them together, but the only way to tell 
whether two halves belonged to one toy is to physically pick up the two pieces and try to fit 
them together. Express how long this matching process will take in terms of n.

Correct: O(n2)


-----------
Exercise 5

For each of the following expressions, select the order of growth class that best describes 
it from the following list: 𝑂(1),𝑂(log(𝑛)),𝑂(𝑛),𝑂(𝑛log(𝑛)),𝑂(𝑛𝑐) or 𝑂(𝑐𝑛).

* 5𝑛

Correct: 0(n)


* 3𝑛2+2𝑛−100

Correct: 0(n^c)


* 10log(𝑛)+5𝑛

Correct: 0(n)


* 10log(𝑛)+5𝑛2

Correct: 0(n^c)


* 3𝑛3−2000𝑛2

Correct: 0(n^c)


* 2𝑛2

Correct: 0(n^c)


* 50𝑛+𝑛log(𝑛)

Correct: 0(n log(n))


* 1000+2000000




* 2𝑛+𝑛2

Correct: 0(n^c)


* log𝑛+1000

Correct: 0(log(n))


-----------
Exercise 6

Consider the following Python procedures. For each one, specify its order of growth.

1:  
# Assume n has been previously bound to some value
    i = 0
    while i < 5:
       n *= 2
       i += 1

    print(n)

Correct: 0(1)


2: 
def iterPower(a, b):
   result = 1
   while b > 0:
      result *= a
      b -= 1
   return result

Correct: 0(b)


3: 
def recurPower(a, b):
   print(a, b)
   if b == 0:
      return 1
   else:
      return a * recurPower(a, b-1)

Correct: 0(b)


4: 
def recurPowerNew(a, b):
   print(a, b)
   if b == 0:
      return 1
   elif b%2 == 0:
      return recurPowerNew(a*a, b/2)
   else:
      return a * recurPowerNew(a, b-1)

Correct: 0(log(b))

-----------
Exercise 7
 
Consider the following Python procedures. For each one, specify its order of growth.

1:    
def lenRecur(s):
    if s == '':
        return 0
    else:
        return 1 + lenRecur(s[1:])
     
Correct: 0(len(s))


2:
def isIn(a, s):
   '''
   a is a character, or, singleton string.
   s is a string, sorted in alphabetical order.
   '''
   if len(s) == 0:
      return False
   elif len(s) == 1:
      return a == s
   else:
      test = s[len(s)//2]
      if test == a:
         return True
      elif a < test:
         return isIn(a, s[:len(s)//2])
      else:
         return isIn(a, s[len(s)//2+1:])

Correct: 0(log(len(s)))


3:
def union(L1, L2):
   '''
   L1 & L2 are lists of the same length, n
   '''
   temp = L1[:]
   for e2 in L2:
      flag = False
      for check in temp:
         if e2 == check:
            flag = True
            break
      if not flag:
         temp.append(e2)
   return temp

For this problem, assume 𝑛 = len(L1) = len(L2)

Correct: 0(n^2)


4:
def unionNew(L1, L2):
   '''
   L1 & L2 are lists of the same length, n
   '''
   temp = []
   for e1 in L1:
      flag = False
      for e2 in L2:
         if e1 == e2:
            flag = True
            break
      if not flag:
         temp.append(e1)
   return temp + L2

For this problem, assume 𝑛 = len(L1) = len(L2) 

Correct: 0(n^2)
