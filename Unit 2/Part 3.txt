Exercise 1

Below are some short Python programs. For each program, answer the associated questions.

Try to answer the questions without running the code. Check your answers, then run the code for the ones you get wrong.


    iteration = 0
    count = 0
    while iteration < 5:
        # the variable 'letter' in the loop stands for every 
        # character, including spaces and commas!
        for letter in "hello, world": 
            count += 1
        print("Iteration " + str(iteration) + "; count is: " + str(count))
        iteration += 1 

What is the value of the variable count that is printed out (at the print statement) on iteration 0?
Correct: 12

What is the value of the variable count that is printed out (at the print statement) on iteration 1?
Correct: 24

What is the value of the variable count that is printed out (at the print statement) on iteration 2?
Correct: 36

What is the value of the variable count that is printed out (at the print statement) on iteration 3?
Correct: 48

What is the value of the variable count that is printed out (at the print statement) on iteration 4? 
Correct: 60


	iteration = 0
	while iteration < 5:
    	count = 0
    	for letter in "hello, world":
        	count += 1
    	print("Iteration " + str(iteration) + "; count is: " + str(count))
    	iteration += 1 

What is the value of the variable count that is printed out (at the print statement) on iteration 0?
Correct: 12

What is the value of the variable count that is printed out (at the print statement) on iteration 1?
Correct: 12

What is the value of the variable count that is printed out (at the print statement) on iteration 2?
Correct: 12

What is the value of the variable count that is printed out (at the print statement) on iteration 3?
Correct: 12

What is the value of the variable count that is printed out (at the print statement) on iteration 4?    	
Correct: 12
  	
    	
	iteration = 0
	while iteration < 5:
    	count = 0
    	for letter in "hello, world":
        	count += 1
        	if iteration % 2 == 0:
            	break
    	print("Iteration " + str(iteration) + "; count is: " + str(count))
    	iteration += 1 

How many times will the print statement be executed?
Correct: 5

What is the largest value of the variable iteration that will be printed out (at the print statement)?
Correct: 4

What is the largest value of the variable count that will be printed out (at the print statement)?
Correct: 12

What is the smallest value of the variable count that will be printed out (at the print statement)?
Correct: 1
 
     	
-----------
Exercise 2 

Consider the following code:

x = 25
epsilon = 0.01
step = 0.1
guess = 0.0

while guess <= x:
    if abs(guess**2 -x) < epsilon:
        break
    else:
        guess += step

if abs(guess**2 - x) >= epsilon:
    print('failed')
else:
    print('succeeded: ' + str(guess))

If this code is executed, it will print succeeded: 4.9999999999998 (or succeeded: 5.0). Remember floating point errors?

Now suppose we try the following:

x = 25
epsilon = 0.01
step = 0.1
guess = 0.0

while guess <= x:
    if abs(guess**2 -x) >= epsilon:
        guess += step

if abs(guess**2 - x) >= epsilon:
    print('failed')
else:
    print('succeeded: ' + str(guess))

Select the answer that best describes what occurs when the above code is executed: 
Script successfully completes, and prints out succeeded: 4.9999999999998 (or succeeded: 5.0)
Script successfully completes, but prints out failed
Script successfully completes, but prints out succeeded: followed by some number not really close to 5.0
Correct: Script enters an infinite loop and never terminates 


Now suppose we try

x = 25
epsilon = 0.01
step = 0.1
guess = 0.0

while abs(guess**2-x) >= epsilon:
    if guess <= x:
        guess += step
    else:
        break

if abs(guess**2 - x) >= epsilon:
    print('failed')
else:
    print('succeeded: ' + str(guess))

Select the answer that best describes what occurs when the above code is executed:
Correct: Script successfully completes, and prints out succeeded: 4.9999999999998 (or succeeded: 5.0)
Script successfully completes, but prints out failed
Script successfully completes, but prints out succeeded: followed by some number not really close to 5.0
Script enters an infinite loop and never terminates     


Finally, let's use the same code as immediately above, but change the first line to x = 23. Note that the square root of 23 is roughly 4.7958.

Select the answer that best describes what occurs when the modified code is executed:

Script successfully completes, and prints out succeeded: 4.9999999999998 (or succeeded: 5.0)
Correct: Script successfully completes, but prints out failed
Script successfully completes, but prints out succeeded: followed by some number not really close to 5.0
Script enters an infinite loop and never terminates 


-----------
Exercise: guess my number  

In this problem, you'll create a program that guesses a secret number!

The program works as follows: you (the user) thinks of an integer between 0 (inclusive) and 100 (not inclusive). The computer makes guesses, 
and you give it input - is its guess too high or too low? Using bisection search, the computer will guess the user's secret number!


print("Please think a number between 0 and 100!")
low = 0
high = 100
i = 0

while i in range(0,100):
    guess = int((low + high)/2)
    print("Is your number" + " " +str(guess) + "?")
    response = str(input("Enter 'h' if the guess is too high. Enter 'l' if the guess is too low. Enter 'c' if the guess is correct. "))
    if response == 'h':
        high = guess
        guess = int((low + high)/2)
        
    elif response == 'l':
        low = guess
        guess = int((low + high)/2)
        
    elif response == 'c':
        print("Game over, Your number was:" + " " +str(guess))
        break

    else:
        print("Sorry, I didn't understand your input")
        
        
-----------
Exercise 3 

True or False? The internal computer representation of any number is always an approximation.

True
Correct: False


The decimal 11 is what binary?:

11
Correct: 1011
1101
cannot be converted


True or False? The internal representation of the decimal number 1/10 = 0.1 requires an infinite number of digits.

Correct: True
False


After many computations, you get two floating numbers stored in variables a and b. Your code compares the numbers with a == b.

Doing the comparison will always lead to a correct program.
Correct: Doing the comparison will sometimes lead to a correct program.
Doing the comparison will never lead to a correct program. 

