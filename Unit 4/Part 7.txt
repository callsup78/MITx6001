Exercise 1
Consider the following code specification:

def size(aSet):
   """
   aSet is a collection of objects, which might be empty.
   Objects are assumed to be of the same type.
   """

Here is a set of possible test cases to include in a black box test suite. Indicate which of the 
following conditions would make a good black box test suite for the function size by clicking on 
the appropriate choice(s).
Review: Black Box Test Suites

Black-box testing is a method of software testing that tests the functionality of an application. 
Recall from the lecture that a way to think about black-box testing is to look at both:

    The possible paths through the specification.
    The possible boundary cases.

Undoubtably many - if not all - of the listed tests look like they would be pretty good for testing 
the function size. However, we want you to think critically about the way size is specified - 
including possible boundary cases - and pick a set of tests that adequately and fully tests all paths 
and boundary conditions. Be sure the set of tests you pick does not have extraneous, useless, or 
repetitive tests.

Correct: Empty set
Correct: Set of size 1
Set of odd size
Set of even size
Correct: Set of size greater than 1
Set whose size is a prime number 


-----------
Exercise 2
Consider the following code specification:

def union(set1, set2):
   """
   set1 and set2 are collections of objects, each of which might be empty.
   Each set has no duplicates within itself, but there may be objects that
   are in both sets. Objects are assumed to be of the same type.

   This function returns one set containing all elements from
   both input sets, but with no duplicates.
   """

Indicate which of the conditions below would combine to make a good black box test suite for the 
function union by selecting the appropriate choice(s).

Correct: set1 is an empty set; set2 is an empty set
Correct: set1 is an empty set; set2 is of size greater than or equal to 1
Correct: set1 is of size greater than or equal to 1; set2 is an empty set
Correct: set1 and set2 are both nonempty sets which do not contain any objects in common
Correct: set1 and set2 are both nonempty sets which contain objects in common 

-----------
Exercise 3
Consider the following function definition:

def maxOfThree(a,b,c) :
    """
    a, b, and c are numbers

    returns: the maximum of a, b, and c        
    """
    if a > b:
        bigger = a

    else:
        bigger = b

    if c > bigger:
        bigger = c

    return bigger

Assume that maxOfThree is called with numbers as arguments.

Which of the following test suites would make a path-complete glass box test suite for maxOfThree?
Review: Glass Box Test Suites

Recall from the lecture that a path-complete glass box test suite would find test cases that go 
through every possible path in the code. This is different from black-box testing, because in black-box
 testing you only have the function specification. For glass-box testing, you actually know how the 
 function you are testing is defined. Thus you can use this definition to figure out how many different 
 paths through the code exist, and then pick a test suite based on that knowledge.

Undoubtably many - if not all - of the listed tests look like they would be pretty good for testing the 
function maxOfThree. However, we want you to think critically about the way maxOfThree is defined - including 
possible boundary cases - and pick a set of tests that adequately and fully tests all paths and boundary 
conditions. A good first step will be to look at the function definition and figure out what paths through 
the code exist. Then, look through the suggested test suites one test at a time and see if the suite tests 
every single path.

Correct: Test Suite A: maxOfThree(2, -10, 100), maxOfThree(7, 9, 10), maxOfThree(6, 1, 5), maxOfThree(0, 40, 20)
Test Suite B: maxOfThree(10, 100, -20), maxOfThree(99, 0, 20), maxOfThree(1, 60, 300)
Test Suite C: maxOfThree(0, 0, 0), maxOfThree(-3, -10, -1), maxOfThree(10, 30, 100), maxOfThree(0, -9, 11), maxOfThree(-10, 0, 30) 


-----------
Exercise 4
Consider the following function definition:

def union(set1, set2):
   """
   set1 and set2 are collections of objects, each of which might be empty.
   Each set has no duplicates within itself, but there may be objects that
   are in both sets. Objects are assumed to be of the same type.

   This function returns one set containing all elements from
   both input sets, but with no duplicates.
   """
   if len(set1) == 0:
      return set2
   elif set1[0] in set2:
      return union(set1[1:], set2)
   else:
      return set1[0] + union(set1[1:], set2)

Assume that union is called with strings as arguments.

Please select the best glass box test suite for the function union from the following options:

Test Suite A: union('',''), union('','a'), union('','ab'), union('a',''), union('a','b'), union('c','ab'), union('de',''), union('ab','c'), union('cd','ab')
Test Suite B: union('abc',''), union('abc','a'), union('abc','ab'), union('abc','d'), union('abc', 'abcd')
Test Suite C: union('','abc'), union('a','abc'), union('ab','abc'), union('abc','abc')
Correct: Test Suite D: union('','abc'), union('a','abc'), union('ab','abc'), union('d','abc') 


-----------
Exercise 5
Consider the following function definition:

def foo(x, a):
   """
   x: a positive integer argument
   a: a positive integer argument

   returns an integer
   """
   count = 0
   while x >= a:
      count += 1
      x = x - a
   return count

Please select the best glass box test suite for the function foo from the following options.

Test Suite A: foo(2, 5), foo(5, 6), foo(9, 7)
Correct: Test Suite B: foo(10, 3), foo(1, 4), foo(10, 6)
Test Suite C: foo(100, 5), foo(96, 5), foo(22, 5) 


-----------
Exercise: integer division
Consider the following function definition:

def integerDivision(x, a):
    """
    x: a non-negative integer argument
    a: a positive integer argument

    returns: integer, the integer division of x divided by a.
    """
    while x >= a:
        count += 1
        x = x - a
    return count

When we call

print(integerDivision(5, 3))

we get the following error message:

File "temp.py", line 9, in integerDivision
    count += 1
UnboundLocalError: local variable 'count' referenced before assignment

Your task is to modify the code for integerDivision so that this error does not occur. 


def integerDivision(x, a):
    """
    x: a non-negative integer argument
    a: a positive integer argument

    returns: integer, the integer division of x divided by a.
    """
    count = 0
    while x >= a:
        count += 1
        x = x - a
    return count
    

-----------
Exercise 6
Consider the following function definition:

def rem(x, a):
    """
    x: a non-negative integer argument
    a: a positive integer argument

    returns: integer, the remainder when x is divided by a.
    """
    if x == a:
        return 0
    elif x < a:
        return x
    else:
        rem(x-a, a)

When we call

rem(2, 5)

the shell returns 2. When we call

rem(5, 5)

the shell returns 0. But when we call

rem(7, 5)

the shell does not return anything! Using this information, choose what line of code should be changed 
from the following choices:

if x == a:
return 0
elif x < a:
return x
else:
Correct: rem(x-a, a) 
-----------
Exercise 7
Consider the following function definition:

def f(n):
   """
   n: integer, n >= 0.
   """
   if n == 0:
      return n
   else:
      return n * f(n-1)

When we call f(3) we expect the result 6, but we get 0.

When we call f(1) we expect the result 1, but we get 0.

When we call f(0) we expect the result 1, but we get 0.

Using this information, choose what line of code should be changed from the following choices:

if n == 0:
Correct: return n
else:
return n * f(n-1) 
