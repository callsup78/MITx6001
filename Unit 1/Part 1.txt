Exercise 1:

What is the difference between an Algorithm and a Program?

Correct: An algorithm is a conceptual idea, a program is a concrete instantiation of an algorithm.
An algorithm is limited to mathematical operation, a program can specify all kinds of operations.
An algorithm makes a slow program run fast.
An algorithm deals with computer hardware, a program deals with computer software.


True or False? A computational mode of thinking means that everything can be viewed as a math problem involving numbers and formulas.

Correct: True
False


True or False? Computer Science is the study of how to build efficient machines that run programs.

True
Correct: False


The two things every computer can do are:

Correct: Perform calculations
Convert electricity to numbers
Display results to a screen
Correct: Remember the results 


-----------

Exercise 2:

Declarative knowledge refers to statements of fact.

Correct: True
False


Imperative knowledge refers to 'how to' methods.

Correct: True
False


A recipe for deducing the square root involves guessing a starting value for y. Without another recipe to be told how to pick a starting number, the computer cannot generate one on its own.

Correct: True
False


-----------
Exercise 3:

True or False? A stored program computer is designed to compute precisely one computation, such as a square root, or the trajectory of a missile.

True
Correct: False


True or False? A fixed program computer is designed to run any computation, by interpreting a sequence of program instructions that are read into it.

True
Correct: False


A program counter

counts the number of primitive operations executed by the program.
counts the number of primitive operations comprising a complex operation.
Correct: points the computer to the next instruction to execute in the program.
remembers how many times a program has been executed.


What does it mean when we say that "the computer walks through the sequence executing some computation"?

The computer tests each instruction to ensure it will not harm the circuitry.
The computer executes the instructions in strict, linear sequence, just like walking in a straight line.
Correct: The computer executes the instructions mostly in a linear sequence, except sometimes it jumps to a different place in the sequence.
The computer slowly executes instructions so that we can follow its progress, rather than running a program at full speed.
correct

True or False? In order to compute everything that is computable, every computer must be able to handle the sixteen most primitive operations.

True
Correct: False


------------
Exercise 4:

Definitions:

Determines whether a string is legal
Correct : Syntax

Determines whether a string has meaning
Correct: Static semantics

Assigns a meaning to a legal sentence
Correct: Semantics


------------
Exercise 5:

For each of the following expressions, indicate the type of the expression. While you could simply type these expressions into your shell, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.

Note: The Python 'None' keyword
In Python, the keyword None is frequently used to represent the absence of a value. None is the only value in Python of type NoneType.

3.14 - float
-34  - int
True - bool
None - NoneType
3.0  - float


------------
Exercise 6:

For each of the following expressions, indicate the value returned, or if the evaluation would lead to an error, write the word 'error' (note this is a word, not a string, no quotes). While you could simply type these expressions into an IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.

For decimal answers, give the full result, or four decimal places of accuracy (whichever is shortest).
Floating point errors

Decimal numbers cannot be stored exactly in the computer because the computer does not have an infinite amount of memory. So decimal numbers are rounded when stored. When you do calculations with these numbers, your final result will be different than the actual result. For example, you may get something like 5.0000000044 instead of 5.0. This is called floating-point rounding error.

6 + 12 -3    = 15
2 * 3.0      = 6.0
- - 4        = 4
10/3         = 3.333
10.0/3.0     = 3.3333
(2 + 3) * 4  = 20
2 + 3 * 4    = 14
2**3 + 1     = 9
2.1 ** 2.0   = 4.41
2.2 * 3.0    = 6.600


------------
Exercise 7:

Below is a transcript of a session with the Python shell. For each expression being evaluated, provide the type and the value the expression returns. If evaluating an expression would cause an error, select 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) in the box. While you could simply type these expressions into your IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.

Assume that the expressions are evaluated in the order shown - that is, each problem part is evaluated directly after the previous problem part(s). 

>>> a = 3
>>> a + 2.0
Correct: float  5.0


>>> a = a + 1.0
>>> a 
Correct: float   4.0

>>> a = 3
>>> b
Correct: NoneType  error


------------
Exercise 8:

For each of the following expressions, indicate the value returned, or if the evaluation would lead to an error, write the word 'error' (note this is a word, not a string, no quotes). While you could simply type these expressions into your IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.

Hint: Python boolean types
Remember that in Python words are case-sensitive. The word True is a Python keyword (it is the value of the Boolean type) and is not the same as the word true. Refer to the Python documentation on Boolean values.
Hint: Priority order of Boolean operations

For these problems, it's important to understand the priority of Boolean operations. The order of operations is as follows:

    Parentheses. Before operating on anything else, Python must evaluate all parentheticals starting at the innermost level.

    not statements.

    and statements.

    or statements.

What this means is that an expression like

not True and False

evaluates to False, because the not is evaluated first (not True is False), then the and is evaluated, yielding False and False which is False.

However the expression

not (True and False)

evaluates to True, because the expression inside the parentheses must be evaluated first - True and False is False. Next the not can be evaluated, yielding not False which is True.

Overall, you should always use parenthesis when writing expressions to make it clear what order you wish to have Python evaluate your expression. As we've seen here, not (True and False) is different from (not True) and False - but it's easy to see how Python will evaluate it when you use parentheses. A statement like not True and False can bring confusion!


3 > 4  - False
4.0 > 3.999   - True
4 > 4    - False
4 > + 4   - False
2 + 2 == 4   - True
True or False   - True
False or False   - False
not False    - True
not False   - False
3.0 - 1.0 != 5.0 - 3.0	- False
3 > 4 or (2 < 3 and 9 > 10)	  - False
4 > 5 or 3 < 4 and 9 > 8 	- True
not(4 > 3 and 100 > 6)   - False


------------
Exercise 9:

Below is a transcript of a session with the Python shell. For each expression being evaluated, provide the type and the value that the last expression in the transcript returns. If evaluating an expression would cause an error, select 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) in the box. While you could simply type these expressions into your IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions.

Assume that the expressions are evaluated in the order shown - that is, each problem part is evaluated directly after the previous problem part(s). 

>>> a = 3
>>> a == 5.0
>>> a 
Correct:  int  3

>>> b = 10
>>> c = b > 9
>>> c 
Correct: bool  True


------------
Exercise 10:

For each of the following expressions, indicate the type of the expression and the value returned, or, if the evaluation would lead to an error, choose the type 'NoneType' and write the word 'error' (note this is a word, not a string, no quotes) as the value returned.

While you could simply type these expressions into your IDE, we encourage you to answer them directly since this will help reinforce your understanding of basic Python expressions. 

3 + 5.0          - float 8.0
5/2		         - float 2.5
5/2 == 5/2.0     - bool  True
5/2.0            - float 2.5
round(2.6)	     - int   3
int(2.6)         - int   2
2.0 + 5.0        - float 7.0
5*2 == 5.0 * 2.0 - bool  True