Exercise: Hand

In this problem, you'll be asked to read through an object-oriented implementation of the 
hand from the word game problem of Problem Set 4. You'll then be asked to implement one of 
its methods. Note that the implementation of the object-oriented version of the hand is a 
bit different than how we did things with the functional implementation; pay close attention 
to doc strings and read through the implementation carefully.

To begin: Download hand.py and read through the file. Be sure to understand what's going 
on in the file. Make a few instances of the Hand class, and play around with the existing 
methods.

When you have completed reading through the file, implement the update method.

Paste the entire Hand class in the box below.

The __str__ method is this:

    def __str__(self):
        '''
        Display a string representation of the hand.
        '''
        output = ''        
        hand_keys = sorted(self.hand.keys())
        for letter in hand_keys:
            for j in range(self.hand[letter]):
                output += letter
        return output

Use this __str__ method to ensure the grading of the hand's display is consistent.


Correct:
# Paste the entire Hand class in this box

class Hand(object):
    def __init__(self, n):
        '''
        Initialize a Hand.

        n: integer, the size of the hand.
        '''
        assert type(n) == int
        self.HAND_SIZE = n
        self.VOWELS = 'aeiou'
        self.CONSONANTS = 'bcdfghjklmnpqrstvwxyz'

        # Deal a new hand
        self.dealNewHand()

    def dealNewHand(self):
        '''
        Deals a new hand, and sets the hand attribute to the new hand.
        '''
        # Set self.hand to a new, empty dictionary
        self.hand = {}

        # Build the hand
        numVowels = self.HAND_SIZE // 3
    
        for i in range(numVowels):
            x = self.VOWELS[random.randrange(0,len(self.VOWELS))]
            self.hand[x] = self.hand.get(x, 0) + 1
        
        for i in range(numVowels, self.HAND_SIZE):    
            x = self.CONSONANTS[random.randrange(0,len(self.CONSONANTS))]
            self.hand[x] = self.hand.get(x, 0) + 1
            
    def setDummyHand(self, handString):
        '''
        Allows you to set a dummy hand. Useful for testing your implementation.

        handString: A string of letters you wish to be in the hand. Length of this
        string must be equal to self.HAND_SIZE.

        This method converts sets the hand attribute to a dictionary
        containing the letters of handString.
        '''
        assert len(handString) == self.HAND_SIZE, "Length of handString ({0}) must equal length of HAND_SIZE ({1})".format(len(handString), self.HAND_SIZE)
        self.hand = {}
        for char in handString:
            self.hand[char] = self.hand.get(char, 0) + 1


    def calculateLen(self):
        '''
        Calculate the length of the hand.
        '''
        ans = 0
        for k in self.hand:
            ans += self.hand[k]
        return ans
    
    def __str__(self):
        '''
        Display a string representation of the hand.
        '''
        output = ''
        hand_keys = sorted(self.hand.keys())
        for letter in hand_keys:
            for j in range(self.hand[letter]):
                output += letter
        return output

    def update(self, word):
        """
        Does not assume that self.hand has all the letters in word.

        Updates the hand: if self.hand does have all the letters to make
        the word, modifies self.hand by using up the letters in the given word.

        Returns True if the word was able to be made with the letter in
        the hand; False otherwise.
        
        word: string
        returns: Boolean (if the word was or was not made)
        """
        # Your code here
        validWord = True
        usedLetters = {}
        for i in word:
            usedLetters[i] = usedLetters.get(i, 0) + 1
        for i in usedLetters.keys():
            if usedLetters.get(i) > self.hand.get(i, 0):
                validWord = False
                break
        if validWord:
            for i in usedLetters.keys():
                self.hand[i] = self.hand.get(i) - usedLetters.get(i)
        return validWord
 

----------
Exercise 1

This problem will ask some questions about the previous problem. You will want to refer to 
the Hand class from hand.py.


1: There are two ways to write the Hand.update method: you could write this method in a 
way that gets rid of the key letter in the attribute hand dictionary when the frequency of 
the letter falls to 0, or write it in a way that leaves the key letter in the attribute 
hand dictionary even when the frequency of the letter falls to 0.

Will the two different implementations of the Hand.update method lead to Hand objects 
having different hand internal attributes?

Correct: Yes, depending on what happened during the update call
   
    
2: There are two ways to write the Hand.update method: you could write this method in a 
way that gets rid of the key letter in the attribute hand dictionary when the frequency of 
the letter falls to 0, or write it in a way that leaves the key letter in the attribute 
hand dictionary even when the frequency of the letter falls to 0.

    Does the calculateLen method, as defined, return different values for the two different 
    implementations of the update method?

Correct: No


----------
Exercise: genPrimes

Write a generator, genPrimes, that returns the sequence of prime numbers on successive calls 
to its next() method: 2, 3, 5, 7, 11, ...


Hints
Ideas about the problem

Have the generator keep a list of the primes it's generated. A candidate number x is prime 
if (x % p) != 0 for all earlier primes p.

Correct:
def genPrimes():
    primes = []   # primes generated so far
    last = 1      # last number tried
    while True:
        last += 1
        for p in primes:
            if last % p == 0:
                break
        else:
            primes.append(last)
            yield last
            

----------
Exercise 2

This problem will ask a series of questions about generators.

1: Thinking about the genPrimes generator from the last problem, which of the following can 
be done only by using a generator, instead of defining a function (that uses any type of 
construct we've learned about, except generators)?

Correct: Everything that can be done with generator can be done with a function 


2: Every procedure that has a yield statement is a generator.

Correct: True


3: If a procedure has only one yield statement, but that statement will never be executed, 
then the procedure is not a generator.

Correct: False


4: If we were to use a generator to iterate over a million numbers, how many numbers do we 
need to store in memory at once? 

Correct: 2


For the following tasks, would it be best to use a generator, a standard function, or either?

1: Finding the nth Fibonacci number 

Correct: Standard Function


2: Printing out an unbounded sequence of Fibonacci numbers 

Correct: Generator


3: Printing out a bounded sequence of prime numbers, where the prime numbers are successively 
computed by division by smaller primes 

Correct: Either a generator or standard function is fine


4: Printing out an unbounded sequence of prime numbers, where the prime numbers are successively 
computed by division by smaller primes

Correct: Generator


5: Finding the score of a word from the 6.00x Word Game of Pset 4 

Correct: Standard function


6: Iterating over a sequence of numbers in a random order, where no number is repeated

Correct: Standard function